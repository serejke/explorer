/* tslint:disable */
/* eslint-disable */
/**
 * Explorer
 * Explorer API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EthTransactionDto
 */
export interface EthTransactionDto {
    /**
     * 
     * @type {string}
     * @memberof EthTransactionDto
     */
    hash: string;
    /**
     * 
     * @type {string}
     * @memberof EthTransactionDto
     */
    blockHash: string;
    /**
     * 
     * @type {number}
     * @memberof EthTransactionDto
     */
    blockNumber: number;
    /**
     * 
     * @type {number}
     * @memberof EthTransactionDto
     */
    transactionIndex: number;
    /**
     * 
     * @type {string}
     * @memberof EthTransactionDto
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof EthTransactionDto
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof EthTransactionDto
     */
    value: string;
    /**
     * 
     * @type {string}
     * @memberof EthTransactionDto
     */
    input: string;
    /**
     * 
     * @type {string}
     * @memberof EthTransactionDto
     */
    gas: string;
    /**
     * 
     * @type {string}
     * @memberof EthTransactionDto
     */
    gasPrice: string;
}

/**
 * Check if a given object implements the EthTransactionDto interface.
 */
export function instanceOfEthTransactionDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "hash" in value;
    isInstance = isInstance && "blockHash" in value;
    isInstance = isInstance && "blockNumber" in value;
    isInstance = isInstance && "transactionIndex" in value;
    isInstance = isInstance && "from" in value;
    isInstance = isInstance && "to" in value;
    isInstance = isInstance && "value" in value;
    isInstance = isInstance && "input" in value;
    isInstance = isInstance && "gas" in value;
    isInstance = isInstance && "gasPrice" in value;

    return isInstance;
}

export function EthTransactionDtoFromJSON(json: any): EthTransactionDto {
    return EthTransactionDtoFromJSONTyped(json, false);
}

export function EthTransactionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): EthTransactionDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hash': json['hash'],
        'blockHash': json['blockHash'],
        'blockNumber': json['blockNumber'],
        'transactionIndex': json['transactionIndex'],
        'from': json['from'],
        'to': json['to'],
        'value': json['value'],
        'input': json['input'],
        'gas': json['gas'],
        'gasPrice': json['gasPrice'],
    };
}

export function EthTransactionDtoToJSON(value?: EthTransactionDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hash': value.hash,
        'blockHash': value.blockHash,
        'blockNumber': value.blockNumber,
        'transactionIndex': value.transactionIndex,
        'from': value.from,
        'to': value.to,
        'value': value.value,
        'input': value.input,
        'gas': value.gas,
        'gasPrice': value.gasPrice,
    };
}

